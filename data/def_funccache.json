[
{"word": "abs(",
"kind": "f",
"menu": "absolute value of {expr}",
"info": "abs({expr}) Float or Number\n\nabsolute value of {expr}",
},
{"word": "acos(",
"kind": "f",
"menu": "arc cosine of {expr}",
"info": "acos({expr}) Float\n\narc cosine of {expr}",
},
{"word": "add(",
"kind": "f",
"menu": "append {item} to |List| {list}",
"info": "add({list}, {item}) List\n\nappend {item} to |List| {list}",
},
{"word": "and(",
"kind": "f",
"menu": "bitwise AND",
"info": "and({expr}, {expr}) Number\n\nbitwise AND",
},
{"word": "append(",
"kind": "f",
"menu": "append {string} below line {lnum}",
"info": "append({lnum}, {string}) Number\n\nappend {string} below line {lnum}",
},
{"word": "append(",
"kind": "f",
"menu": "append lines {list} below line {lnum}",
"info": "append({lnum}, {list}) Number\n\nappend lines {list} below line {lnum}",
},
{"word": "argc()",
"kind": "f",
"menu": "number of files in the argument list",
"info": "argc() Number\n\nnumber of files in the argument list",
},
{"word": "argidx()",
"kind": "f",
"menu": "current index in the argument list",
"info": "argidx() Number\n\ncurrent index in the argument list",
},
{"word": "arglistid(",
"kind": "f",
"menu": "argument list id",
"info": "arglistid([{winnr} [, {tabnr}]]) Number\n\nargument list id",
},
{"word": "argv(",
"kind": "f",
"menu": "{nr} entry of the argument list",
"info": "argv({nr}) String\n\n{nr} entry of the argument list",
},
{"word": "argv()",
"kind": "f",
"menu": "the argument list",
"info": "argv() List\n\nthe argument list",
},
{"word": "assert_equal(",
"kind": "f",
"menu": "assert {exp} is equal to {act}",
"info": "assert_equal({exp}, {act} [, {msg}]) none\n\nassert {exp} is equal to {act}",
},
{"word": "assert_exception(",
"kind": "f",
"menu": "assert {error} is in v:exception",
"info": "assert_exception({error} [, {msg}]) none\n\nassert {error} is in v:exception",
},
{"word": "assert_fails(",
"kind": "f",
"menu": "assert {cmd} fails",
"info": "assert_fails({cmd} [, {error}]) none\n\nassert {cmd} fails",
},
{"word": "assert_false(",
"kind": "f",
"menu": "assert {actual} is false",
"info": "assert_false({actual} [, {msg}]) none\n\nassert {actual} is false",
},
{"word": "assert_inrange(",
"kind": "f",
"menu": "assert {actual} is inside the range",
"info": "assert_inrange({lower}, {upper}, {actual} [, {msg}]) none\n\nassert {actual} is inside the range",
},
{"word": "assert_match(",
"kind": "f",
"menu": "assert {pat} matches {text}",
"info": "assert_match({pat}, {text} [, {msg}]) none\n\nassert {pat} matches {text}",
},
{"word": "assert_notequal(",
"kind": "f",
"menu": "assert {exp} is not equal {act}",
"info": "assert_notequal({exp}, {act} [, {msg}]) none\n\nassert {exp} is not equal {act}",
},
{"word": "assert_notmatch(",
"kind": "f",
"menu": "assert {pat} not matches {text}",
"info": "assert_notmatch({pat}, {text} [, {msg}]) none\n\nassert {pat} not matches {text}",
},
{"word": "assert_report(",
"kind": "f",
"menu": "report a test failure",
"info": "assert_report({msg}) none\n\nreport a test failure",
},
{"word": "assert_true(",
"kind": "f",
"menu": "assert {actual} is true",
"info": "assert_true({actual} [, {msg}]) none\n\nassert {actual} is true",
},
{"word": "asin(",
"kind": "f",
"menu": "arc sine of {expr}",
"info": "asin({expr}) Float\n\narc sine of {expr}",
},
{"word": "atan(",
"kind": "f",
"menu": "arc tangent of {expr}",
"info": "atan({expr}) Float\n\narc tangent of {expr}",
},
{"word": "atan2(",
"kind": "f",
"menu": "arc tangent of {expr1} / {expr2}",
"info": "atan2({expr1}, {expr2}) Float\n\narc tangent of {expr1} / {expr2}",
},
{"word": "balloon_show(",
"kind": "f",
"menu": "show {msg} inside the balloon",
"info": "balloon_show({msg}) none\n\nshow {msg} inside the balloon",
},
{"word": "browse(",
"kind": "f",
"menu": "put up a file requester",
"info": "browse({save}, {title}, {initdir}, {default}) String\n\nput up a file requester",
},
{"word": "browsedir(",
"kind": "f",
"menu": "put up a directory requester",
"info": "browsedir({title}, {initdir}) String\n\nput up a directory requester",
},
{"word": "bufexists(",
"kind": "f",
"menu": "|TRUE| if buffer {expr} exists",
"info": "bufexists({expr}) Number\n\n|TRUE| if buffer {expr} exists",
},
{"word": "buflisted(",
"kind": "f",
"menu": "|TRUE| if buffer {expr} is listed",
"info": "buflisted({expr}) Number\n\n|TRUE| if buffer {expr} is listed",
},
{"word": "bufloaded(",
"kind": "f",
"menu": "|TRUE| if buffer {expr} is loaded",
"info": "bufloaded({expr}) Number\n\n|TRUE| if buffer {expr} is loaded",
},
{"word": "bufname(",
"kind": "f",
"menu": "Name of the buffer {expr}",
"info": "bufname({expr}) String\n\nName of the buffer {expr}",
},
{"word": "bufnr(",
"kind": "f",
"menu": "Number of the buffer {expr}",
"info": "bufnr({expr} [, {create}]) Number\n\nNumber of the buffer {expr}",
},
{"word": "bufwinid(",
"kind": "f",
"menu": "window ID of buffer {expr}",
"info": "bufwinid({expr}) Number\n\nwindow ID of buffer {expr}",
},
{"word": "bufwinnr(",
"kind": "f",
"menu": "window number of buffer {expr}",
"info": "bufwinnr({expr}) Number\n\nwindow number of buffer {expr}",
},
{"word": "byte2line(",
"kind": "f",
"menu": "line number at byte count {byte}",
"info": "byte2line({byte}) Number\n\nline number at byte count {byte}",
},
{"word": "byteidx(",
"kind": "f",
"menu": "byte index of {nr}'th char in {expr}",
"info": "byteidx({expr}, {nr}) Number\n\nbyte index of {nr}'th char in {expr}",
},
{"word": "byteidxcomp(",
"kind": "f",
"menu": "byte index of {nr}'th char in {expr}",
"info": "byteidxcomp({expr}, {nr}) Number\n\nbyte index of {nr}'th char in {expr}",
},
{"word": "call(",
"kind": "f",
"menu": "call {func} with arguments {arglist}",
"info": "call({func}, {arglist} [, {dict}]) any\n\ncall {func} with arguments {arglist}",
},
{"word": "ceil(",
"kind": "f",
"menu": "round {expr} up",
"info": "ceil({expr}) Float\n\nround {expr} up",
},
{"word": "ch_canread(",
"kind": "f",
"menu": "check if there is something to read",
"info": "ch_canread({handle}) Number\n\ncheck if there is something to read",
},
{"word": "ch_close(",
"kind": "f",
"menu": "close {handle}",
"info": "ch_close({handle}) none\n\nclose {handle}",
},
{"word": "ch_close_in(",
"kind": "f",
"menu": "close in part of {handle}",
"info": "ch_close_in({handle}) none\n\nclose in part of {handle}",
},
{"word": "ch_evalexpr(",
"kind": "f",
"menu": "evaluate {expr} on JSON {handle}",
"info": "ch_evalexpr({handle}, {expr} [, {options}]) any\n\nevaluate {expr} on JSON {handle}",
},
{"word": "ch_evalraw(",
"kind": "f",
"menu": "evaluate {string} on raw {handle}",
"info": "ch_evalraw({handle}, {string} [, {options}]) any\n\nevaluate {string} on raw {handle}",
},
{"word": "ch_getbufnr(",
"kind": "f",
"menu": "get buffer number for {handle}/{what}",
"info": "ch_getbufnr({handle}, {what}) Number\n\nget buffer number for {handle}/{what}",
},
{"word": "ch_getjob(",
"kind": "f",
"menu": "get the Job of {channel}",
"info": "ch_getjob({channel}) Job\n\nget the Job of {channel}",
},
{"word": "ch_info(",
"kind": "f",
"menu": "info about channel {handle}",
"info": "ch_info({handle}) String\n\ninfo about channel {handle}",
},
{"word": "ch_log(",
"kind": "f",
"menu": "write {msg} in the channel log file",
"info": "ch_log({msg} [, {handle}]) none\n\nwrite {msg} in the channel log file",
},
{"word": "ch_logfile(",
"kind": "f",
"menu": "start logging channel activity",
"info": "ch_logfile({fname} [, {mode}]) none\n\nstart logging channel activity",
},
{"word": "ch_open(",
"kind": "f",
"menu": "open a channel to {address}",
"info": "ch_open({address} [, {options}]) Channel\n\nopen a channel to {address}",
},
{"word": "ch_read(",
"kind": "f",
"menu": "read from {handle}",
"info": "ch_read({handle} [, {options}]) String\n\nread from {handle}",
},
{"word": "ch_readraw(",
"kind": "f",
"menu": "read raw from {handle}",
"info": "ch_readraw({handle} [, {options}]) String\n\nread raw from {handle}",
},
{"word": "ch_sendexpr(",
"kind": "f",
"menu": "send {expr} over JSON {handle}",
"info": "ch_sendexpr({handle}, {expr} [, {options}]) any\n\nsend {expr} over JSON {handle}",
},
{"word": "ch_sendraw(",
"kind": "f",
"menu": "send {string} over raw {handle}",
"info": "ch_sendraw({handle}, {string} [, {options}]) any\n\nsend {string} over raw {handle}",
},
{"word": "ch_setoptions(",
"kind": "f",
"menu": "set options for {handle}",
"info": "ch_setoptions({handle}, {options}) none\n\nset options for {handle}",
},
{"word": "ch_status(",
"kind": "f",
"menu": "status of channel {handle}",
"info": "ch_status({handle} [, {options}]) String\n\nstatus of channel {handle}",
},
{"word": "changenr()",
"kind": "f",
"menu": "current change number",
"info": "changenr() Number\n\ncurrent change number",
},
{"word": "char2nr(",
"kind": "f",
"menu": "ASCII/UTF8 value of first char in {expr}",
"info": "char2nr({expr}[, {utf8}]) Number\n\nASCII/UTF8 value of first char in {expr}",
},
{"word": "cindent(",
"kind": "f",
"menu": "C indent for line {lnum}",
"info": "cindent({lnum}) Number\n\nC indent for line {lnum}",
},
{"word": "clearmatches()",
"kind": "f",
"menu": "clear all matches",
"info": "clearmatches() none\n\nclear all matches",
},
{"word": "col(",
"kind": "f",
"menu": "column nr of cursor or mark",
"info": "col({expr}) Number\n\ncolumn nr of cursor or mark",
},
{"word": "complete(",
"kind": "f",
"menu": "set Insert mode completion",
"info": "complete({startcol}, {matches}) none\n\nset Insert mode completion",
},
{"word": "complete_add(",
"kind": "f",
"menu": "add completion match",
"info": "complete_add({expr}) Number\n\nadd completion match",
},
{"word": "complete_check()",
"kind": "f",
"menu": "check for key typed during completion",
"info": "complete_check() Number\n\ncheck for key typed during completion",
},
{"word": "confirm(",
"kind": "f",
"menu": "number of choice picked by user",
"info": "confirm({msg} [, {choices} [, {default} [, {type}]]]) Number\n\nnumber of choice picked by user",
},
{"word": "copy(",
"kind": "f",
"menu": "make a shallow copy of {expr}",
"info": "copy({expr}) any\n\nmake a shallow copy of {expr}",
},
{"word": "cos(",
"kind": "f",
"menu": "cosine of {expr}",
"info": "cos({expr}) Float\n\ncosine of {expr}",
},
{"word": "cosh(",
"kind": "f",
"menu": "hyperbolic cosine of {expr}",
"info": "cosh({expr}) Float\n\nhyperbolic cosine of {expr}",
},
{"word": "count(",
"kind": "f",
"menu": "count how many {expr} are in {list}",
"info": "count({list}, {expr} [, {ic} [, {start}]]) Number\n\ncount how many {expr} are in {list}",
},
{"word": "cscope_connection(",
"kind": "f",
"menu": "checks existence of cscope connection",
"info": "cscope_connection([{num}, {dbpath} [, {prepend}]]) Number\n\nchecks existence of cscope connection",
},
{"word": "cursor(",
"kind": "f",
"menu": "move cursor to {lnum}, {col}, {off}",
"info": "cursor({lnum}, {col} [, {off}]) Number\n\nmove cursor to {lnum}, {col}, {off}",
},
{"word": "cursor(",
"kind": "f",
"menu": "move cursor to position in {list}",
"info": "cursor({list}) Number\n\nmove cursor to position in {list}",
},
{"word": "deepcopy(",
"kind": "f",
"menu": "make a full copy of {expr}",
"info": "deepcopy({expr} [, {noref}]) any\n\nmake a full copy of {expr}",
},
{"word": "delete(",
"kind": "f",
"menu": "delete the file or directory {fname}",
"info": "delete({fname} [, {flags}]) Number\n\ndelete the file or directory {fname}",
},
{"word": "did_filetype()",
"kind": "f",
"menu": "|TRUE| if FileType autocmd event used",
"info": "did_filetype() Number\n\n|TRUE| if FileType autocmd event used",
},
{"word": "diff_filler(",
"kind": "f",
"menu": "diff filler lines about {lnum}",
"info": "diff_filler({lnum}) Number\n\ndiff filler lines about {lnum}",
},
{"word": "diff_hlID(",
"kind": "f",
"menu": "diff highlighting at {lnum}/{col}",
"info": "diff_hlID({lnum}, {col}) Number\n\ndiff highlighting at {lnum}/{col}",
},
{"word": "empty(",
"kind": "f",
"menu": "|TRUE| if {expr} is empty",
"info": "empty({expr}) Number\n\n|TRUE| if {expr} is empty",
},
{"word": "escape(",
"kind": "f",
"menu": "escape {chars} in {string} with '\'",
"info": "escape({string}, {chars}) String\n\nescape {chars} in {string} with '\'",
},
{"word": "eval(",
"kind": "f",
"menu": "evaluate {string} into its value",
"info": "eval({string}) any\n\nevaluate {string} into its value",
},
{"word": "eventhandler()",
"kind": "f",
"menu": "|TRUE| if inside an event handler",
"info": "eventhandler() Number\n\n|TRUE| if inside an event handler",
},
{"word": "executable(",
"kind": "f",
"menu": "1 if executable {expr} exists",
"info": "executable({expr}) Number\n\n1 if executable {expr} exists",
},
{"word": "execute(",
"kind": "f",
"menu": "execute {command} and get the output",
"info": "execute({command}) String\n\nexecute {command} and get the output",
},
{"word": "exepath(",
"kind": "f",
"menu": "full path of the command {expr}",
"info": "exepath({expr}) String\n\nfull path of the command {expr}",
},
{"word": "exists(",
"kind": "f",
"menu": "|TRUE| if {expr} exists",
"info": "exists({expr}) Number\n\n|TRUE| if {expr} exists",
},
{"word": "extend(",
"kind": "f",
"menu": "insert items of {expr2} into {expr1}",
"info": "extend({expr1}, {expr2} [, {expr3}]) List/Dict\n\ninsert items of {expr2} into {expr1}",
},
{"word": "exp(",
"kind": "f",
"menu": "exponential of {expr}",
"info": "exp({expr}) Float\n\nexponential of {expr}",
},
{"word": "expand(",
"kind": "f",
"menu": "expand special keywords in {expr}",
"info": "expand({expr} [, {nosuf} [, {list}]]) any\n\nexpand special keywords in {expr}",
},
{"word": "feedkeys(",
"kind": "f",
"menu": "add key sequence to typeahead buffer",
"info": "feedkeys({string} [, {mode}]) Number\n\nadd key sequence to typeahead buffer",
},
{"word": "filereadable(",
"kind": "f",
"menu": "|TRUE| if {file} is a readable file",
"info": "filereadable({file}) Number\n\n|TRUE| if {file} is a readable file",
},
{"word": "filewritable(",
"kind": "f",
"menu": "|TRUE| if {file} is a writable file",
"info": "filewritable({file}) Number\n\n|TRUE| if {file} is a writable file",
},
{"word": "filter(",
"kind": "f",
"menu": "remove items from {expr1} where{expr2} is 0",
"info": "filter({expr1}, {expr2}) List/Dict\n\nremove items from {expr1} where{expr2} is 0",
},
{"word": "finddir(",
"kind": "f",
"menu": "find directory {name} in {path}",
"info": "finddir({name}[, {path}[, {count}]]) String\n\nfind directory {name} in {path}",
},
{"word": "findfile(",
"kind": "f",
"menu": "find file {name} in {path}",
"info": "findfile({name}[, {path}[, {count}]]) String\n\nfind file {name} in {path}",
},
{"word": "float2nr(",
"kind": "f",
"menu": "convert Float {expr} to a Number",
"info": "float2nr({expr}) Number\n\nconvert Float {expr} to a Number",
},
{"word": "floor(",
"kind": "f",
"menu": "round {expr} down",
"info": "floor({expr}) Float\n\nround {expr} down",
},
{"word": "fmod(",
"kind": "f",
"menu": "remainder of {expr1} / {expr2}",
"info": "fmod({expr1}, {expr2}) Float\n\nremainder of {expr1} / {expr2}",
},
{"word": "fnameescape(",
"kind": "f",
"menu": "escape special characters in {fname}",
"info": "fnameescape({fname}) String\n\nescape special characters in {fname}",
},
{"word": "fnamemodify(",
"kind": "f",
"menu": "modify file name",
"info": "fnamemodify({fname}, {mods}) String\n\nmodify file name",
},
{"word": "foldclosed(",
"kind": "f",
"menu": "first line of fold at {lnum} if closed",
"info": "foldclosed({lnum}) Number\n\nfirst line of fold at {lnum} if closed",
},
{"word": "foldclosedend(",
"kind": "f",
"menu": "last line of fold at {lnum} if closed",
"info": "foldclosedend({lnum}) Number\n\nlast line of fold at {lnum} if closed",
},
{"word": "foldlevel(",
"kind": "f",
"menu": "fold level at {lnum}",
"info": "foldlevel({lnum}) Number\n\nfold level at {lnum}",
},
{"word": "foldtext()",
"kind": "f",
"menu": "line displayed for closed fold",
"info": "foldtext() String\n\nline displayed for closed fold",
},
{"word": "foldtextresult(",
"kind": "f",
"menu": "text for closed fold at {lnum}",
"info": "foldtextresult({lnum}) String\n\ntext for closed fold at {lnum}",
},
{"word": "foreground()",
"kind": "f",
"menu": "bring the Vim window to the foreground",
"info": "foreground() Number\n\nbring the Vim window to the foreground",
},
{"word": "funcref(",
"kind": "f",
"menu": "reference to function {name}",
"info": "funcref({name} [, {arglist}] [, {dict}]) Funcref\n\nreference to function {name}",
},
{"word": "function(",
"kind": "f",
"menu": "named reference to function {name}",
"info": "function({name} [, {arglist}] [, {dict}]) Funcref\n\nnamed reference to function {name}",
},
{"word": "garbagecollect(",
"kind": "f",
"menu": "free memory, breaking cyclic references",
"info": "garbagecollect([{atexit}]) none\n\nfree memory, breaking cyclic references",
},
{"word": "get(",
"kind": "f",
"menu": "get item {idx} from {list} or {def}",
"info": "get({list}, {idx} [, {def}]) any\n\nget item {idx} from {list} or {def}",
},
{"word": "get(",
"kind": "f",
"menu": "get item {key} from {dict} or {def}",
"info": "get({dict}, {key} [, {def}]) any\n\nget item {key} from {dict} or {def}",
},
{"word": "get(",
"kind": "f",
"menu": "get property of funcref/partial {func}",
"info": "get({func}, {what}) any\n\nget property of funcref/partial {func}",
},
{"word": "getbufinfo(",
"kind": "f",
"menu": "information about buffers",
"info": "getbufinfo([{expr}]) List\n\ninformation about buffers",
},
{"word": "getbufline(",
"kind": "f",
"menu": "lines {lnum} to {end} of buffer {expr}",
"info": "getbufline({expr}, {lnum} [, {end}]) List\n\nlines {lnum} to {end} of buffer {expr}",
},
{"word": "getbufvar(",
"kind": "f",
"menu": "variable {varname} in buffer {expr}",
"info": "getbufvar({expr}, {varname} [, {def}]) any\n\nvariable {varname} in buffer {expr}",
},
{"word": "getchar(",
"kind": "f",
"menu": "get one character from the user",
"info": "getchar([expr]) Number\n\nget one character from the user",
},
{"word": "getcharmod()",
"kind": "f",
"menu": "modifiers for the last typed character",
"info": "getcharmod() Number\n\nmodifiers for the last typed character",
},
{"word": "getcharsearch()",
"kind": "f",
"menu": "last character search",
"info": "getcharsearch() Dict\n\nlast character search",
},
{"word": "getcmdline()",
"kind": "f",
"menu": "return the current command-line",
"info": "getcmdline() String\n\nreturn the current command-line",
},
{"word": "getcmdpos()",
"kind": "f",
"menu": "return cursor position in command-line",
"info": "getcmdpos() Number\n\nreturn cursor position in command-line",
},
{"word": "getcmdtype()",
"kind": "f",
"menu": "return current command-line type",
"info": "getcmdtype() String\n\nreturn current command-line type",
},
{"word": "getcmdwintype()",
"kind": "f",
"menu": "return current command-line window type",
"info": "getcmdwintype() String\n\nreturn current command-line window type",
},
{"word": "getcompletion(",
"kind": "f",
"menu": "list of cmdline completion matches",
"info": "getcompletion({pat}, {type} [, {filtered}]) List\n\nlist of cmdline completion matches",
},
{"word": "getcurpos()",
"kind": "f",
"menu": "position of the cursor",
"info": "getcurpos() List\n\nposition of the cursor",
},
{"word": "getcwd(",
"kind": "f",
"menu": "get the current working directory",
"info": "getcwd([{winnr} [, {tabnr}]]) String\n\nget the current working directory",
},
{"word": "getfontname(",
"kind": "f",
"menu": "name of font being used",
"info": "getfontname([{name}]) String\n\nname of font being used",
},
{"word": "getfperm(",
"kind": "f",
"menu": "file permissions of file {fname}",
"info": "getfperm({fname}) String\n\nfile permissions of file {fname}",
},
{"word": "getfsize(",
"kind": "f",
"menu": "size in bytes of file {fname}",
"info": "getfsize({fname}) Number\n\nsize in bytes of file {fname}",
},
{"word": "getftime(",
"kind": "f",
"menu": "last modification time of file",
"info": "getftime({fname}) Number\n\nlast modification time of file",
},
{"word": "getftype(",
"kind": "f",
"menu": "description of type of file {fname}",
"info": "getftype({fname}) String\n\ndescription of type of file {fname}",
},
{"word": "getline(",
"kind": "f",
"menu": "line {lnum} of current buffer",
"info": "getline({lnum}) String\n\nline {lnum} of current buffer",
},
{"word": "getline(",
"kind": "f",
"menu": "lines {lnum} to {end} of current buffer",
"info": "getline({lnum}, {end}) List\n\nlines {lnum} to {end} of current buffer",
},
{"word": "getloclist(",
"kind": "f",
"menu": "list of location list items",
"info": "getloclist({nr}[, {what}]) List\n\nlist of location list items",
},
{"word": "getmatches()",
"kind": "f",
"menu": "list of current matches",
"info": "getmatches() List\n\nlist of current matches",
},
{"word": "getpid()",
"kind": "f",
"menu": "process ID of Vim",
"info": "getpid() Number\n\nprocess ID of Vim",
},
{"word": "getpos(",
"kind": "f",
"menu": "position of cursor, mark, etc.",
"info": "getpos({expr}) List\n\nposition of cursor, mark, etc.",
},
{"word": "getqflist(",
"kind": "f",
"menu": "list of quickfix items",
"info": "getqflist([{what}]) List\n\nlist of quickfix items",
},
{"word": "getreg(",
"kind": "f",
"menu": "contents of register",
"info": "getreg([{regname} [, 1 [, {list}]]]) String or List\n\ncontents of register",
},
{"word": "getregtype(",
"kind": "f",
"menu": "type of register",
"info": "getregtype([{regname}]) String\n\ntype of register",
},
{"word": "gettabinfo(",
"kind": "f",
"menu": "list of tab pages",
"info": "gettabinfo([{expr}]) List\n\nlist of tab pages",
},
{"word": "gettabvar(",
"kind": "f",
"menu": "variable {varname} in tab {nr} or {def}",
"info": "gettabvar({nr}, {varname} [, {def}]) any\n\nvariable {varname} in tab {nr} or {def}",
},
{"word": "gettabwinvar(",
"kind": "f",
"menu": "{name} in {winnr} in tab page {tabnr}",
"info": "gettabwinvar({tabnr}, {winnr}, {name} [, {def}]) any\n\n{name} in {winnr} in tab page {tabnr}",
},
{"word": "getwininfo(",
"kind": "f",
"menu": "list of windows",
"info": "getwininfo([{winid}]) List\n\nlist of windows",
},
{"word": "getwinposx()",
"kind": "f",
"menu": "X coord in pixels of GUI Vim window",
"info": "getwinposx() Number\n\nX coord in pixels of GUI Vim window",
},
{"word": "getwinposy()",
"kind": "f",
"menu": "Y coord in pixels of GUI Vim window",
"info": "getwinposy() Number\n\nY coord in pixels of GUI Vim window",
},
{"word": "getwinvar(",
"kind": "f",
"menu": "variable {varname} in window {nr}",
"info": "getwinvar({nr}, {varname} [, {def}]) any\n\nvariable {varname} in window {nr}",
},
{"word": "glob(",
"kind": "f",
"menu": "expand file wildcards in {expr}",
"info": "glob({expr} [, {nosuf} [, {list} [, {alllinks}]]]) any\n\nexpand file wildcards in {expr}",
},
{"word": "glob2regpat(",
"kind": "f",
"menu": "convert a glob pat into a search pat",
"info": "glob2regpat({expr}) String\n\nconvert a glob pat into a search pat",
},
{"word": "globpath(",
"kind": "f",
"menu": "do glob({expr}) for all dirs in {path}",
"info": "globpath({path}, {expr} [, {nosuf} [, {list} [, {alllinks}]]]) String\n\ndo glob({expr}) for all dirs in {path}",
},
{"word": "has(",
"kind": "f",
"menu": "|TRUE| if feature {feature} supported",
"info": "has({feature}) Number\n\n|TRUE| if feature {feature} supported",
},
{"word": "has_key(",
"kind": "f",
"menu": "|TRUE| if {dict} has entry {key}",
"info": "has_key({dict}, {key}) Number\n\n|TRUE| if {dict} has entry {key}",
},
{"word": "haslocaldir(",
"kind": "f",
"menu": "|TRUE| if the window executed |:lcd|",
"info": "haslocaldir([{winnr} [, {tabnr}]]) Number\n\n|TRUE| if the window executed |:lcd|",
},
{"word": "hasmapto(",
"kind": "f",
"menu": "|TRUE| if mapping to {what} exists",
"info": "hasmapto({what} [, {mode} [, {abbr}]]) Number\n\n|TRUE| if mapping to {what} exists",
},
{"word": "histadd(",
"kind": "f",
"menu": "add an item to a history",
"info": "histadd({history}, {item}) String\n\nadd an item to a history",
},
{"word": "histdel(",
"kind": "f",
"menu": "remove an item from a history",
"info": "histdel({history} [, {item}]) String\n\nremove an item from a history",
},
{"word": "histget(",
"kind": "f",
"menu": "get the item {index} from a history",
"info": "histget({history} [, {index}]) String\n\nget the item {index} from a history",
},
{"word": "histnr(",
"kind": "f",
"menu": "highest index of a history",
"info": "histnr({history}) Number\n\nhighest index of a history",
},
{"word": "hlexists(",
"kind": "f",
"menu": "|TRUE| if highlight group {name} exists",
"info": "hlexists({name}) Number\n\n|TRUE| if highlight group {name} exists",
},
{"word": "hlID(",
"kind": "f",
"menu": "syntax ID of highlight group {name}",
"info": "hlID({name}) Number\n\nsyntax ID of highlight group {name}",
},
{"word": "hostname()",
"kind": "f",
"menu": "name of the machine Vim is running on",
"info": "hostname() String\n\nname of the machine Vim is running on",
},
{"word": "iconv(",
"kind": "f",
"menu": "convert encoding of {expr}",
"info": "iconv({expr}, {from}, {to}) String\n\nconvert encoding of {expr}",
},
{"word": "indent(",
"kind": "f",
"menu": "indent of line {lnum}",
"info": "indent({lnum}) Number\n\nindent of line {lnum}",
},
{"word": "index(",
"kind": "f",
"menu": "index in {list} where {expr} appears",
"info": "index({list}, {expr} [, {start} [, {ic}]]) Number\n\nindex in {list} where {expr} appears",
},
{"word": "input(",
"kind": "f",
"menu": "get input from the user",
"info": "input({prompt} [, {text} [, {completion}]]) String\n\nget input from the user",
},
{"word": "inputdialog(",
"kind": "f",
"menu": "like input() but in a GUI dialog",
"info": "inputdialog({prompt} [, {text} [, {completion}]]) String\n\nlike input() but in a GUI dialog",
},
{"word": "inputlist(",
"kind": "f",
"menu": "let the user pick from a choice list",
"info": "inputlist({textlist}) Number\n\nlet the user pick from a choice list",
},
{"word": "inputrestore()",
"kind": "f",
"menu": "restore typeahead",
"info": "inputrestore() Number\n\nrestore typeahead",
},
{"word": "inputsave()",
"kind": "f",
"menu": "save and clear typeahead",
"info": "inputsave() Number\n\nsave and clear typeahead",
},
{"word": "inputsecret(",
"kind": "f",
"menu": "like input() but hiding the text",
"info": "inputsecret({prompt} [, {text}]) String\n\nlike input() but hiding the text",
},
{"word": "insert(",
"kind": "f",
"menu": "insert {item} in {list} [before {idx}]",
"info": "insert({list}, {item} [, {idx}]) List\n\ninsert {item} in {list} [before {idx}]",
},
{"word": "invert(",
"kind": "f",
"menu": "bitwise invert",
"info": "invert({expr}) Number\n\nbitwise invert",
},
{"word": "isdirectory(",
"kind": "f",
"menu": "|TRUE| if {directory} is a directory",
"info": "isdirectory({directory}) Number\n\n|TRUE| if {directory} is a directory",
},
{"word": "islocked(",
"kind": "f",
"menu": "|TRUE| if {expr} is locked",
"info": "islocked({expr}) Number\n\n|TRUE| if {expr} is locked",
},
{"word": "isnan(",
"kind": "f",
"menu": "|TRUE| if {expr} is NaN",
"info": "isnan({expr}) Number\n\n|TRUE| if {expr} is NaN",
},
{"word": "items(",
"kind": "f",
"menu": "key-value pairs in {dict}",
"info": "items({dict}) List\n\nkey-value pairs in {dict}",
},
{"word": "job_getchannel(",
"kind": "f",
"menu": "get the channel handle for {job}",
"info": "job_getchannel({job}) Channel\n\nget the channel handle for {job}",
},
{"word": "job_info(",
"kind": "f",
"menu": "get information about {job}",
"info": "job_info({job}) Dict\n\nget information about {job}",
},
{"word": "job_setoptions(",
"kind": "f",
"menu": "set options for {job}",
"info": "job_setoptions({job}, {options}) none\n\nset options for {job}",
},
{"word": "job_start(",
"kind": "f",
"menu": "start a job",
"info": "job_start({command} [, {options}]) Job\n\nstart a job",
},
{"word": "job_status(",
"kind": "f",
"menu": "get the status of {job}",
"info": "job_status({job}) String\n\nget the status of {job}",
},
{"word": "job_stop(",
"kind": "f",
"menu": "stop {job}",
"info": "job_stop({job} [, {how}]) Number\n\nstop {job}",
},
{"word": "join(",
"kind": "f",
"menu": "join {list} items into one String",
"info": "join({list} [, {sep}]) String\n\njoin {list} items into one String",
},
{"word": "js_decode(",
"kind": "f",
"menu": "decode JS style JSON",
"info": "js_decode({string}) any\n\ndecode JS style JSON",
},
{"word": "js_encode(",
"kind": "f",
"menu": "encode JS style JSON",
"info": "js_encode({expr}) String\n\nencode JS style JSON",
},
{"word": "json_decode(",
"kind": "f",
"menu": "decode JSON",
"info": "json_decode({string}) any\n\ndecode JSON",
},
{"word": "json_encode(",
"kind": "f",
"menu": "encode JSON",
"info": "json_encode({expr}) String\n\nencode JSON",
},
{"word": "keys(",
"kind": "f",
"menu": "keys in {dict}",
"info": "keys({dict}) List\n\nkeys in {dict}",
},
{"word": "len(",
"kind": "f",
"menu": "the length of {expr}",
"info": "len({expr}) Number\n\nthe length of {expr}",
},
{"word": "libcall(",
"kind": "f",
"menu": "call {func} in library {lib} with {arg}",
"info": "libcall({lib}, {func}, {arg}) String\n\ncall {func} in library {lib} with {arg}",
},
{"word": "libcallnr(",
"kind": "f",
"menu": "idem, but return a Number",
"info": "libcallnr({lib}, {func}, {arg}) Number\n\nidem, but return a Number",
},
{"word": "line(",
"kind": "f",
"menu": "line nr of cursor, last line or mark",
"info": "line({expr}) Number\n\nline nr of cursor, last line or mark",
},
{"word": "line2byte(",
"kind": "f",
"menu": "byte count of line {lnum}",
"info": "line2byte({lnum}) Number\n\nbyte count of line {lnum}",
},
{"word": "lispindent(",
"kind": "f",
"menu": "Lisp indent for line {lnum}",
"info": "lispindent({lnum}) Number\n\nLisp indent for line {lnum}",
},
{"word": "localtime()",
"kind": "f",
"menu": "current time",
"info": "localtime() Number\n\ncurrent time",
},
{"word": "log(",
"kind": "f",
"menu": "natural logarithm (base e) of {expr}",
"info": "log({expr}) Float\n\nnatural logarithm (base e) of {expr}",
},
{"word": "log10(",
"kind": "f",
"menu": "logarithm of Float {expr} to base 10",
"info": "log10({expr}) Float\n\nlogarithm of Float {expr} to base 10",
},
{"word": "luaeval(",
"kind": "f",
"menu": "evaluate |Lua| expression",
"info": "luaeval({expr}[, {expr}]) any\n\nevaluate |Lua| expression",
},
{"word": "map(",
"kind": "f",
"menu": "change each item in {expr1} to {expr}",
"info": "map({expr1}, {expr2}) List/Dict\n\nchange each item in {expr1} to {expr}",
},
{"word": "maparg(",
"kind": "f",
"menu": "rhs of mapping {name} in mode {mode}",
"info": "maparg({name}[, {mode} [, {abbr} [, {dict}]]]) String or Dict\n\nrhs of mapping {name} in mode {mode}",
},
{"word": "mapcheck(",
"kind": "f",
"menu": "check for mappings matching {name}",
"info": "mapcheck({name}[, {mode} [, {abbr}]]) String\n\ncheck for mappings matching {name}",
},
{"word": "match(",
"kind": "f",
"menu": "position where {pat} matches in {expr}",
"info": "match({expr}, {pat}[, {start}[, {count}]]) Number\n\nposition where {pat} matches in {expr}",
},
{"word": "matchadd(",
"kind": "f",
"menu": "highlight {pattern} with {group}",
"info": "matchadd({group}, {pattern}[, {priority}[, {id} [, {dict}]]]) Number\n\nhighlight {pattern} with {group}",
},
{"word": "matchaddpos(",
"kind": "f",
"menu": "highlight positions with {group}",
"info": "matchaddpos({group}, {pos}[, {priority}[, {id}[, {dict}]]]) Number\n\nhighlight positions with {group}",
},
{"word": "matcharg(",
"kind": "f",
"menu": "arguments of |:match|",
"info": "matcharg({nr}) List\n\narguments of |:match|",
},
{"word": "matchdelete(",
"kind": "f",
"menu": "delete match identified by {id}",
"info": "matchdelete({id}) Number\n\ndelete match identified by {id}",
},
{"word": "matchend(",
"kind": "f",
"menu": "position where {pat} ends in {expr}",
"info": "matchend({expr}, {pat}[, {start}[, {count}]]) Number\n\nposition where {pat} ends in {expr}",
},
{"word": "matchlist(",
"kind": "f",
"menu": "match and submatches of {pat} in {expr}",
"info": "matchlist({expr}, {pat}[, {start}[, {count}]]) List\n\nmatch and submatches of {pat} in {expr}",
},
{"word": "matchstr(",
"kind": "f",
"menu": "{count}'th match of {pat} in {expr}",
"info": "matchstr({expr}, {pat}[, {start}[, {count}]]) String\n\n{count}'th match of {pat} in {expr}",
},
{"word": "matchstrpos(",
"kind": "f",
"menu": "{count}'th match of {pat} in {expr}",
"info": "matchstrpos({expr}, {pat}[, {start}[, {count}]]) List\n\n{count}'th match of {pat} in {expr}",
},
{"word": "max(",
"kind": "f",
"menu": "maximum value of items in {expr}",
"info": "max({expr}) Number\n\nmaximum value of items in {expr}",
},
{"word": "min(",
"kind": "f",
"menu": "minimum value of items in {expr}",
"info": "min({expr}) Number\n\nminimum value of items in {expr}",
},
{"word": "mkdir(",
"kind": "f",
"menu": "create directory {name}",
"info": "mkdir({name} [, {path} [, {prot}]]) Number\n\ncreate directory {name}",
},
{"word": "mode(",
"kind": "f",
"menu": "current editing mode",
"info": "mode([expr]) String\n\ncurrent editing mode",
},
{"word": "mzeval(",
"kind": "f",
"menu": "evaluate |MzScheme| expression",
"info": "mzeval({expr}) any\n\nevaluate |MzScheme| expression",
},
{"word": "nextnonblank(",
"kind": "f",
"menu": "line nr of non-blank line >= {lnum}",
"info": "nextnonblank({lnum}) Number\n\nline nr of non-blank line >= {lnum}",
},
{"word": "nr2char(",
"kind": "f",
"menu": "single char with ASCII/UTF8 value {expr}",
"info": "nr2char({expr}[, {utf8}]) String\n\nsingle char with ASCII/UTF8 value {expr}",
},
{"word": "or(",
"kind": "f",
"menu": "bitwise OR",
"info": "or({expr}, {expr}) Number\n\nbitwise OR",
},
{"word": "pathshorten(",
"kind": "f",
"menu": "shorten directory names in a path",
"info": "pathshorten({expr}) String\n\nshorten directory names in a path",
},
{"word": "perleval(",
"kind": "f",
"menu": "evaluate |Perl| expression",
"info": "perleval({expr}) any\n\nevaluate |Perl| expression",
},
{"word": "pow(",
"kind": "f",
"menu": "{x} to the power of {y}",
"info": "pow({x}, {y}) Float\n\n{x} to the power of {y}",
},
{"word": "prevnonblank(",
"kind": "f",
"menu": "line nr of non-blank line <= {lnum}",
"info": "prevnonblank({lnum}) Number\n\nline nr of non-blank line <= {lnum}",
},
{"word": "printf(",
"kind": "f",
"menu": "format text",
"info": "printf({fmt}, {expr1}...) String\n\nformat text",
},
{"word": "pumvisible()",
"kind": "f",
"menu": "whether popup menu is visible",
"info": "pumvisible() Number\n\nwhether popup menu is visible",
},
{"word": "pyeval(",
"kind": "f",
"menu": "evaluate |Python| expression",
"info": "pyeval({expr}) any\n\nevaluate |Python| expression",
},
{"word": "py3eval(",
"kind": "f",
"menu": "evaluate |python3| expression",
"info": "py3eval({expr}) any\n\nevaluate |python3| expression",
},
{"word": "pyxeval(",
"kind": "f",
"menu": "evaluate |python_x| expression",
"info": "pyxeval({expr}) any\n\nevaluate |python_x| expression",
},
{"word": "range(",
"kind": "f",
"menu": "items from {expr} to {max}",
"info": "range({expr} [, {max} [, {stride}]]) List\n\nitems from {expr} to {max}",
},
{"word": "readfile(",
"kind": "f",
"menu": "get list of lines from file {fname}",
"info": "readfile({fname} [, {binary} [, {max}]]) List\n\nget list of lines from file {fname}",
},
{"word": "reltime(",
"kind": "f",
"menu": "get time value",
"info": "reltime([{start} [, {end}]]) List\n\nget time value",
},
{"word": "reltimefloat(",
"kind": "f",
"menu": "turn the time value into a Float",
"info": "reltimefloat({time}) Float\n\nturn the time value into a Float",
},
{"word": "reltimestr(",
"kind": "f",
"menu": "turn time value into a String",
"info": "reltimestr({time}) String\n\nturn time value into a String",
},
{"word": "remote_expr(",
"kind": "f",
"menu": "send expression",
"info": "remote_expr({server}, {string} [, {idvar} [, {timeout}]]) String\n\nsend expression",
},
{"word": "remote_foreground(",
"kind": "f",
"menu": "bring Vim server to the foreground",
"info": "remote_foreground({server}) Number\n\nbring Vim server to the foreground",
},
{"word": "remote_peek(",
"kind": "f",
"menu": "check for reply string",
"info": "remote_peek({serverid} [, {retvar}]) Number\n\ncheck for reply string",
},
{"word": "remote_read(",
"kind": "f",
"menu": "read reply string",
"info": "remote_read({serverid} [, {timeout}]) String\n\nread reply string",
},
{"word": "remote_send(",
"kind": "f",
"menu": "send key sequence",
"info": "remote_send({server}, {string} [, {idvar}]) String\n\nsend key sequence",
},
{"word": "remote_startserver(",
"kind": "f",
"menu": "become server {name}String	send key sequence",
"info": "remote_startserver({name}) none\n\nbecome server {name}String	send key sequence",
},
{"word": "remove(",
"kind": "f",
"menu": "remove items {idx}-{end} from {list}",
"info": "remove({list}, {idx} [, {end}]) any\n\nremove items {idx}-{end} from {list}",
},
{"word": "remove(",
"kind": "f",
"menu": "remove entry {key} from {dict}",
"info": "remove({dict}, {key}) any\n\nremove entry {key} from {dict}",
},
{"word": "rename(",
"kind": "f",
"menu": "rename (move) file from {from} to {to}",
"info": "rename({from}, {to}) Number\n\nrename (move) file from {from} to {to}",
},
{"word": "repeat(",
"kind": "f",
"menu": "repeat {expr} {count} times",
"info": "repeat({expr}, {count}) String\n\nrepeat {expr} {count} times",
},
{"word": "resolve(",
"kind": "f",
"menu": "get filename a shortcut points to",
"info": "resolve({filename}) String\n\nget filename a shortcut points to",
},
{"word": "reverse(",
"kind": "f",
"menu": "reverse {list} in-place",
"info": "reverse({list}) List\n\nreverse {list} in-place",
},
{"word": "round(",
"kind": "f",
"menu": "round off {expr}",
"info": "round({expr}) Float\n\nround off {expr}",
},
{"word": "screenattr(",
"kind": "f",
"menu": "attribute at screen position",
"info": "screenattr({row}, {col}) Number\n\nattribute at screen position",
},
{"word": "screenchar(",
"kind": "f",
"menu": "character at screen position",
"info": "screenchar({row}, {col}) Number\n\ncharacter at screen position",
},
{"word": "screencol()",
"kind": "f",
"menu": "current cursor column",
"info": "screencol() Number\n\ncurrent cursor column",
},
{"word": "screenrow()",
"kind": "f",
"menu": "current cursor row",
"info": "screenrow() Number\n\ncurrent cursor row",
},
{"word": "search(",
"kind": "f",
"menu": "search for {pattern}",
"info": "search({pattern} [, {flags} [, {stopline} [, {timeout}]]]) Number\n\nsearch for {pattern}",
},
{"word": "searchdecl(",
"kind": "f",
"menu": "search for variable declaration",
"info": "searchdecl({name} [, {global} [, {thisblock}]]) Number\n\nsearch for variable declaration",
},
{"word": "searchpair(",
"kind": "f",
"menu": "search for other end of start/end pair",
"info": "searchpair({start}, {middle}, {end} [, {flags} [, {skip} [...]]]) Number\n\nsearch for other end of start/end pair",
},
{"word": "searchpairpos(",
"kind": "f",
"menu": "search for other end of start/end pair",
"info": "searchpairpos({start}, {middle}, {end} [, {flags} [, {skip} [...]]]) List\n\nsearch for other end of start/end pair",
},
{"word": "searchpos(",
"kind": "f",
"menu": "search for {pattern}",
"info": "searchpos({pattern} [, {flags} [, {stopline} [, {timeout}]]]) List\n\nsearch for {pattern}",
},
{"word": "server2client(",
"kind": "f",
"menu": "send reply string",
"info": "server2client({clientid}, {string}) Number\n\nsend reply string",
},
{"word": "serverlist()",
"kind": "f",
"menu": "get a list of available servers",
"info": "serverlist() String\n\nget a list of available servers",
},
{"word": "setbufline(",
"kind": "f",
"menu": "set line {lnum} to {line} in buffer{expr}",
"info": "setbufline( {expr}, {lnum}, {line}) Number\n\nset line {lnum} to {line} in buffer{expr}",
},
{"word": "setbufvar(",
"kind": "f",
"menu": "set {varname} in buffer {expr} to {val}",
"info": "setbufvar({expr}, {varname}, {val}) none\n\nset {varname} in buffer {expr} to {val}",
},
{"word": "setcharsearch(",
"kind": "f",
"menu": "set character search from {dict}",
"info": "setcharsearch({dict}) Dict\n\nset character search from {dict}",
},
{"word": "setcmdpos(",
"kind": "f",
"menu": "set cursor position in command-line",
"info": "setcmdpos({pos}) Number\n\nset cursor position in command-line",
},
{"word": "setfperm(",
"kind": "f",
"menu": "set {fname} file permissions to {mode}",
"info": "setfperm({fname}, {mode}) Number\n\nset {fname} file permissions to {mode}",
},
{"word": "setline(",
"kind": "f",
"menu": "set line {lnum} to {line}",
"info": "setline({lnum}, {line}) Number\n\nset line {lnum} to {line}",
},
{"word": "setloclist(",
"kind": "f",
"menu": "modify location list using {list}",
"info": "setloclist({nr}, {list}[, {action}[, {what}]]) Number\n\nmodify location list using {list}",
},
{"word": "setmatches(",
"kind": "f",
"menu": "restore a list of matches",
"info": "setmatches({list}) Number\n\nrestore a list of matches",
},
{"word": "setpos(",
"kind": "f",
"menu": "set the {expr} position to {list}",
"info": "setpos({expr}, {list}) Number\n\nset the {expr} position to {list}",
},
{"word": "setqflist(",
"kind": "f",
"menu": "modify quickfix list using {list}",
"info": "setqflist({list}[, {action}[, {what}]]) Number\n\nmodify quickfix list using {list}",
},
{"word": "setreg(",
"kind": "f",
"menu": "set register to value and type",
"info": "setreg({n}, {v}[, {opt}]) Number\n\nset register to value and type",
},
{"word": "settabvar(",
"kind": "f",
"menu": "set {varname} in tab page {nr} to {val}",
"info": "settabvar({nr}, {varname}, {val}) none\n\nset {varname} in tab page {nr} to {val}",
},
{"word": "settabwinvar(",
"kind": "f",
"menu": "set {varname} in window {winnr} in tabpage {tabnr} to {val}",
"info": "settabwinvar({tabnr}, {winnr}, {varname}, {val}) none\n\nset {varname} in window {winnr} in tabpage {tabnr} to {val}",
},
{"word": "setwinvar(",
"kind": "f",
"menu": "set {varname} in window {nr} to {val}",
"info": "setwinvar({nr}, {varname}, {val}) none\n\nset {varname} in window {nr} to {val}",
},
{"word": "sha256(",
"kind": "f",
"menu": "SHA256 checksum of {string}",
"info": "sha256({string}) String\n\nSHA256 checksum of {string}",
},
{"word": "shellescape(",
"kind": "f",
"menu": "escape {string} for use as shellcommand argument",
"info": "shellescape({string} [, {special}]) String\n\nescape {string} for use as shellcommand argument",
},
{"word": "shiftwidth()",
"kind": "f",
"menu": "effective value of 'shiftwidth'",
"info": "shiftwidth() Number\n\neffective value of 'shiftwidth'",
},
{"word": "simplify(",
"kind": "f",
"menu": "simplify filename as much as possible",
"info": "simplify({filename}) String\n\nsimplify filename as much as possible",
},
{"word": "sin(",
"kind": "f",
"menu": "sine of {expr}",
"info": "sin({expr}) Float\n\nsine of {expr}",
},
{"word": "sinh(",
"kind": "f",
"menu": "hyperbolic sine of {expr}",
"info": "sinh({expr}) Float\n\nhyperbolic sine of {expr}",
},
{"word": "sort(",
"kind": "f",
"menu": "sort {list}, using {func} to compare",
"info": "sort({list} [, {func} [, {dict}]]) List\n\nsort {list}, using {func} to compare",
},
{"word": "soundfold(",
"kind": "f",
"menu": "sound-fold {word}",
"info": "soundfold({word}) String\n\nsound-fold {word}",
},
{"word": "spellbadword()",
"kind": "f",
"menu": "badly spelled word at cursor",
"info": "spellbadword() String\n\nbadly spelled word at cursor",
},
{"word": "spellsuggest(",
"kind": "f",
"menu": "spelling suggestions",
"info": "spellsuggest({word} [, {max} [, {capital}]]) List\n\nspelling suggestions",
},
{"word": "split(",
"kind": "f",
"menu": "make |List| from {pat} separated {expr}",
"info": "split({expr} [, {pat} [, {keepempty}]]) List\n\nmake |List| from {pat} separated {expr}",
},
{"word": "sqrt(",
"kind": "f",
"menu": "square root of {expr}",
"info": "sqrt({expr}) Float\n\nsquare root of {expr}",
},
{"word": "str2float(",
"kind": "f",
"menu": "convert String to Float",
"info": "str2float({expr}) Float\n\nconvert String to Float",
},
{"word": "str2nr(",
"kind": "f",
"menu": "convert String to Number",
"info": "str2nr({expr} [, {base}]) Number\n\nconvert String to Number",
},
{"word": "strchars(",
"kind": "f",
"menu": "character length of the String {expr}",
"info": "strchars({expr} [, {skipcc}]) Number\n\ncharacter length of the String {expr}",
},
{"word": "strcharpart(",
"kind": "f",
"menu": "{len} characters of {str} at {start}",
"info": "strcharpart({str}, {start}[, {len}]) String\n\n{len} characters of {str} at {start}",
},
{"word": "strdisplaywidth(",
"kind": "f",
"menu": "display length of the String {expr}",
"info": "strdisplaywidth({expr} [, {col}]) Number\n\ndisplay length of the String {expr}",
},
{"word": "strftime(",
"kind": "f",
"menu": "time in specified format",
"info": "strftime({format}[, {time}]) String\n\ntime in specified format",
},
{"word": "strgetchar(",
"kind": "f",
"menu": "get char {index} from {str}",
"info": "strgetchar({str}, {index}) Number\n\nget char {index} from {str}",
},
{"word": "stridx(",
"kind": "f",
"menu": "index of {needle} in {haystack}",
"info": "stridx({haystack}, {needle}[, {start}]) Number\n\nindex of {needle} in {haystack}",
},
{"word": "string(",
"kind": "f",
"menu": "String representation of {expr} value",
"info": "string({expr}) String\n\nString representation of {expr} value",
},
{"word": "strlen(",
"kind": "f",
"menu": "length of the String {expr}",
"info": "strlen({expr}) Number\n\nlength of the String {expr}",
},
{"word": "strpart(",
"kind": "f",
"menu": "{len} characters of {str} at {start}",
"info": "strpart({str}, {start}[, {len}]) String\n\n{len} characters of {str} at {start}",
},
{"word": "strridx(",
"kind": "f",
"menu": "last index of {needle} in {haystack}",
"info": "strridx({haystack}, {needle} [, {start}]) Number\n\nlast index of {needle} in {haystack}",
},
{"word": "strtrans(",
"kind": "f",
"menu": "translate string to make it printable",
"info": "strtrans({expr}) String\n\ntranslate string to make it printable",
},
{"word": "strwidth(",
"kind": "f",
"menu": "display cell length of the String {expr}",
"info": "strwidth({expr}) Number\n\ndisplay cell length of the String {expr}",
},
{"word": "submatch(",
"kind": "f",
"menu": "or Listspecific match in \":s\" or substitute()",
"info": "submatch({nr}[, {list}]) String\n\nor Listspecific match in \":s\" or substitute()",
},
{"word": "substitute(",
"kind": "f",
"menu": "all {pat} in {expr} replaced with {sub}",
"info": "substitute({expr}, {pat}, {sub}, {flags}) String\n\nall {pat} in {expr} replaced with {sub}",
},
{"word": "synID(",
"kind": "f",
"menu": "syntax ID at {lnum} and {col}",
"info": "synID({lnum}, {col}, {trans}) Number\n\nsyntax ID at {lnum} and {col}",
},
{"word": "synIDattr(",
"kind": "f",
"menu": "attribute {what} of syntax ID {synID}",
"info": "synIDattr({synID}, {what} [, {mode}]) String\n\nattribute {what} of syntax ID {synID}",
},
{"word": "synIDtrans(",
"kind": "f",
"menu": "translated syntax ID of {synID}",
"info": "synIDtrans({synID}) Number\n\ntranslated syntax ID of {synID}",
},
{"word": "synconcealed(",
"kind": "f",
"menu": "info about concealing",
"info": "synconcealed({lnum}, {col}) List\n\ninfo about concealing",
},
{"word": "synstack(",
"kind": "f",
"menu": "stack of syntax IDs at {lnum} and {col}",
"info": "synstack({lnum}, {col}) List\n\nstack of syntax IDs at {lnum} and {col}",
},
{"word": "system(",
"kind": "f",
"menu": "output of shell command/filter {expr}",
"info": "system({expr} [, {input}]) String\n\noutput of shell command/filter {expr}",
},
{"word": "systemlist(",
"kind": "f",
"menu": "output of shell command/filter {expr}",
"info": "systemlist({expr} [, {input}]) List\n\noutput of shell command/filter {expr}",
},
{"word": "tabpagebuflist(",
"kind": "f",
"menu": "list of buffer numbers in tab page",
"info": "tabpagebuflist([{arg}]) List\n\nlist of buffer numbers in tab page",
},
{"word": "tabpagenr(",
"kind": "f",
"menu": "number of current or last tab page",
"info": "tabpagenr([{arg}]) Number\n\nnumber of current or last tab page",
},
{"word": "tabpagewinnr(",
"kind": "f",
"menu": "number of current window in tab page",
"info": "tabpagewinnr({tabarg}[, {arg}]) Number\n\nnumber of current window in tab page",
},
{"word": "taglist(",
"kind": "f",
"menu": "list of tags matching {expr}",
"info": "taglist({expr}[, {filename}]) List\n\nlist of tags matching {expr}",
},
{"word": "tagfiles()",
"kind": "f",
"menu": "tags files used",
"info": "tagfiles() List\n\ntags files used",
},
{"word": "tan(",
"kind": "f",
"menu": "tangent of {expr}",
"info": "tan({expr}) Float\n\ntangent of {expr}",
},
{"word": "tanh(",
"kind": "f",
"menu": "hyperbolic tangent of {expr}",
"info": "tanh({expr}) Float\n\nhyperbolic tangent of {expr}",
},
{"word": "tempname()",
"kind": "f",
"menu": "name for a temporary file",
"info": "tempname() String\n\nname for a temporary file",
},
{"word": "term_getaltscreen(",
"kind": "f",
"menu": "get the alternate screen flag",
"info": "term_getaltscreen({buf}) Number\n\nget the alternate screen flag",
},
{"word": "term_getattr(",
"kind": "f",
"menu": "get the value of attribute {what}",
"info": "term_getattr({attr}, {what}) Number\n\nget the value of attribute {what}",
},
{"word": "term_getcursor(",
"kind": "f",
"menu": "get the cursor position of a terminal",
"info": "term_getcursor({buf}) List\n\nget the cursor position of a terminal",
},
{"word": "term_getjob(",
"kind": "f",
"menu": "get the job associated with a terminal",
"info": "term_getjob({buf}) Job\n\nget the job associated with a terminal",
},
{"word": "term_getline(",
"kind": "f",
"menu": "get a line of text from a terminal",
"info": "term_getline({buf}, {row}) String\n\nget a line of text from a terminal",
},
{"word": "term_getscrolled(",
"kind": "f",
"menu": "get the scroll count of a terminal",
"info": "term_getscrolled({buf}) Number\n\nget the scroll count of a terminal",
},
{"word": "term_getsize(",
"kind": "f",
"menu": "get the size of a terminal",
"info": "term_getsize({buf}) List\n\nget the size of a terminal",
},
{"word": "term_getstatus(",
"kind": "f",
"menu": "get the status of a terminal",
"info": "term_getstatus({buf}) String\n\nget the status of a terminal",
},
{"word": "term_gettitle(",
"kind": "f",
"menu": "get the title of a terminal",
"info": "term_gettitle({buf}) String\n\nget the title of a terminal",
},
{"word": "term_getttty(",
"kind": "f",
"menu": "get the tty name of a terminal",
"info": "term_getttty({buf}, [{input}]) String\n\nget the tty name of a terminal",
},
{"word": "term_list()",
"kind": "f",
"menu": "get the list of terminal buffers",
"info": "term_list() List\n\nget the list of terminal buffers",
},
{"word": "term_scrape(",
"kind": "f",
"menu": "get row of a terminal screen",
"info": "term_scrape({buf}, {row}) List\n\nget row of a terminal screen",
},
{"word": "term_sendkeys(",
"kind": "f",
"menu": "send keystrokes to a terminal",
"info": "term_sendkeys({buf}, {keys}) none\n\nsend keystrokes to a terminal",
},
{"word": "term_start(",
"kind": "f",
"menu": "open a terminal window and run a job",
"info": "term_start({cmd}, {options}) Job\n\nopen a terminal window and run a job",
},
{"word": "term_wait(",
"kind": "f",
"menu": "wait for screen to be updated",
"info": "term_wait({buf} [, {time}]) Number\n\nwait for screen to be updated",
},
{"word": "test_alloc_fail(",
"kind": "f",
"menu": "make memory allocation fail",
"info": "test_alloc_fail({id}, {countdown}, {repeat}) none\n\nmake memory allocation fail",
},
{"word": "test_autochdir()",
"kind": "f",
"menu": "enable 'autochdir' during startup",
"info": "test_autochdir() none\n\nenable 'autochdir' during startup",
},
{"word": "test_feedinput()",
"kind": "f",
"menu": "add key sequence to input buffer",
"info": "test_feedinput() none\n\nadd key sequence to input buffer",
},
{"word": "test_garbagecollect_now()",
"kind": "f",
"menu": "free memory right now for testing",
"info": "test_garbagecollect_now() none\n\nfree memory right now for testing",
},
{"word": "test_ignore_error(",
"kind": "f",
"menu": "ignore a specific error",
"info": "test_ignore_error({expr}) none\n\nignore a specific error",
},
{"word": "test_null_channel()",
"kind": "f",
"menu": "null value for testing",
"info": "test_null_channel() Channel\n\nnull value for testing",
},
{"word": "test_null_dict()",
"kind": "f",
"menu": "null value for testing",
"info": "test_null_dict() Dict\n\nnull value for testing",
},
{"word": "test_null_job()",
"kind": "f",
"menu": "null value for testing",
"info": "test_null_job() Job\n\nnull value for testing",
},
{"word": "test_null_list()",
"kind": "f",
"menu": "null value for testing",
"info": "test_null_list() List\n\nnull value for testing",
},
{"word": "test_null_partial()",
"kind": "f",
"menu": "null value for testing",
"info": "test_null_partial() Funcref\n\nnull value for testing",
},
{"word": "test_null_string()",
"kind": "f",
"menu": "null value for testing",
"info": "test_null_string() String\n\nnull value for testing",
},
{"word": "test_override(",
"kind": "f",
"menu": "test with Vim internal overrides",
"info": "test_override({expr}, {val}) none\n\ntest with Vim internal overrides",
},
{"word": "test_settime(",
"kind": "f",
"menu": "set current time for testing",
"info": "test_settime({expr}) none\n\nset current time for testing",
},
{"word": "timer_info(",
"kind": "f",
"menu": "information about timers",
"info": "timer_info([{id}]) List\n\ninformation about timers",
},
{"word": "timer_pause(",
"kind": "f",
"menu": "pause or unpause a timer",
"info": "timer_pause({id}, {pause}) none\n\npause or unpause a timer",
},
{"word": "timer_start(",
"kind": "f",
"menu": "create a timer",
"info": "timer_start({time}, {callback} [, {options}]) Number\n\ncreate a timer",
},
{"word": "timer_stop(",
"kind": "f",
"menu": "stop a timer",
"info": "timer_stop({timer}) none\n\nstop a timer",
},
{"word": "timer_stopall()",
"kind": "f",
"menu": "stop all timers",
"info": "timer_stopall() none\n\nstop all timers",
},
{"word": "tolower(",
"kind": "f",
"menu": "the String {expr} switched to lowercase",
"info": "tolower({expr}) String\n\nthe String {expr} switched to lowercase",
},
{"word": "toupper(",
"kind": "f",
"menu": "the String {expr} switched to uppercase",
"info": "toupper({expr}) String\n\nthe String {expr} switched to uppercase",
},
{"word": "tr(",
"kind": "f",
"menu": "translate chars of {src} in {fromstr}to chars in {tostr}",
"info": "tr({src}, {fromstr}, {tostr}) String\n\ntranslate chars of {src} in {fromstr}to chars in {tostr}",
},
{"word": "trunc(",
"kind": "f",
"menu": "truncate Float {expr}",
"info": "trunc({expr}) Float\n\ntruncate Float {expr}",
},
{"word": "type(",
"kind": "f",
"menu": "type of variable {name}",
"info": "type({name}) Number\n\ntype of variable {name}",
},
{"word": "undofile(",
"kind": "f",
"menu": "undo file name for {name}",
"info": "undofile({name}) String\n\nundo file name for {name}",
},
{"word": "undotree()",
"kind": "f",
"menu": "undo file tree",
"info": "undotree() List\n\nundo file tree",
},
{"word": "uniq(",
"kind": "f",
"menu": "remove adjacent duplicates from a list",
"info": "uniq({list} [, {func} [, {dict}]]) List\n\nremove adjacent duplicates from a list",
},
{"word": "values(",
"kind": "f",
"menu": "values in {dict}",
"info": "values({dict}) List\n\nvalues in {dict}",
},
{"word": "virtcol(",
"kind": "f",
"menu": "screen column of cursor or mark",
"info": "virtcol({expr}) Number\n\nscreen column of cursor or mark",
},
{"word": "visualmode(",
"kind": "f",
"menu": "last visual mode used",
"info": "visualmode([expr]) String\n\nlast visual mode used",
},
{"word": "wildmenumode()",
"kind": "f",
"menu": "whether 'wildmenu' mode is active",
"info": "wildmenumode() Number\n\nwhether 'wildmenu' mode is active",
},
{"word": "win_findbuf(",
"kind": "f",
"menu": "find windows containing {bufnr}",
"info": "win_findbuf({bufnr}) List\n\nfind windows containing {bufnr}",
},
{"word": "win_getid(",
"kind": "f",
"menu": "get window ID for {win} in {tab}",
"info": "win_getid([{win} [, {tab}]]) Number\n\nget window ID for {win} in {tab}",
},
{"word": "win_gotoid(",
"kind": "f",
"menu": "go to window with ID {expr}",
"info": "win_gotoid({expr}) Number\n\ngo to window with ID {expr}",
},
{"word": "win_id2tabwin(",
"kind": "f",
"menu": "get tab and window nr from window ID",
"info": "win_id2tabwin({expr}) List\n\nget tab and window nr from window ID",
},
{"word": "win_id2win(",
"kind": "f",
"menu": "get window nr from window ID",
"info": "win_id2win({expr}) Number\n\nget window nr from window ID",
},
{"word": "winbufnr(",
"kind": "f",
"menu": "buffer number of window {nr}",
"info": "winbufnr({nr}) Number\n\nbuffer number of window {nr}",
},
{"word": "wincol()",
"kind": "f",
"menu": "window column of the cursor",
"info": "wincol() Number\n\nwindow column of the cursor",
},
{"word": "winheight(",
"kind": "f",
"menu": "height of window {nr}",
"info": "winheight({nr}) Number\n\nheight of window {nr}",
},
{"word": "winline()",
"kind": "f",
"menu": "window line of the cursor",
"info": "winline() Number\n\nwindow line of the cursor",
},
{"word": "winnr(",
"kind": "f",
"menu": "number of current window",
"info": "winnr([{expr}]) Number\n\nnumber of current window",
},
{"word": "winrestcmd()",
"kind": "f",
"menu": "returns command to restore window sizes",
"info": "winrestcmd() String\n\nreturns command to restore window sizes",
},
{"word": "winrestview(",
"kind": "f",
"menu": "restore view of current window",
"info": "winrestview({dict}) none\n\nrestore view of current window",
},
{"word": "winsaveview()",
"kind": "f",
"menu": "save view of current window",
"info": "winsaveview() Dict\n\nsave view of current window",
},
{"word": "winwidth(",
"kind": "f",
"menu": "width of window {nr}",
"info": "winwidth({nr}) Number\n\nwidth of window {nr}",
},
{"word": "wordcount()",
"kind": "f",
"menu": "get byte/char/word statistics",
"info": "wordcount() Dict\n\nget byte/char/word statistics",
},
{"word": "writefile(",
"kind": "f",
"menu": "write list of lines to file {fname}",
"info": "writefile({list}, {fname} [, {flags}]) Number\n\nwrite list of lines to file {fname}",
},
{"word": "xor(",
"kind": "f",
"menu": "bitwise XOR",
"info": "xor({expr}, {expr}) Number\n\nbitwise XOR",
}]